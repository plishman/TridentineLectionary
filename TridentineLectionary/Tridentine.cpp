#include "pch.h"
#include "TimeLib.h"
#include "Tridentine.h"
#ifndef __AVR__
#include <stdio.h>
#include "yml.h"
#endif

/*
"""The movable feasts of the liturgical calendar.

These feasts are represented as objects with a `name` and a `date`.  The `name`
attribute links the feast to the other data in `movable_feasts_ferias_et_al.json`.

This module contains the function `get_movable_feasts` which will introspect this module
to find all the movable feasts in the calendar.  Any `MovableFeast` objects added to
this module will therefore be added to the calendor generated by `tridentine_calendar`.

"""
*/
/*
import calendar
import datetime as dt
import functools
from abc import ABCMeta
from abc import abstractmethod
*/

const char* const Tridentine::Feasts[68] = {
	"-",
	"gaudete_sunday",
	"advent_embertide1",
	"advent_embertide2",
	"advent_embertide3",
	"sunday_in_xmas_octave",
	"holy_name",
	"holy_family",
	"plough_monday",
	"ash_wednesday",
	"lenten_embertide1",
	"lenten_embertide2",
	"lenten_embertide3",
	"quinquagesima",
	"fat_thursday", 
	"shrove_monday",
	"mardigras", 
	"sexagesima",
	"septuagesima",
	"st_matthias",
	"st_gabriel_of_our_lady_of_sorrows",
	"laetare_sunday",
	"passion_sunday",
	"seven_sorrows", 
	"ladyday",
	"stjoseph",
	"palm_sunday",
	"monday_of_holyweek",
	"tuesday_of_holyweek",
	"spy_wednesday",
	"maundy_thursday",
	"good_friday", 
	"holy_saturday", 
	"easter", 
	"easter_monday",
	"easter_tuesday",
	"easter_wednesday", 
	"easter_thursday",
	"easter_friday",
	"easter_saturday",
	"quasimodo_sunday", 
	"misericordia_sunday",
	"jubilate_sunday",
	"cantate_sunday",
	"major_rogation",
	"minor_rogation1",
	"minor_rogation2",
	"minor_rogation3",
	"ascension_vigil",
	"ascension",
	"sunday_after_ascension",
	"pentecost_vigil",
	"pentecost", 
	"pentecost_monday", 
	"pentecost_tuesday",
	"whit_embertide1",
	"whit_embertide2",
	"whit_embertide3",
	"thursday_in_pentecost_week",
	"trinity_sunday",
	"corpus_christi",
	"sacred_heart",
	"peters_pence",
	"michaelmas_embertide1",
	"michaelmas_embertide2",
	"michaelmas_embertide3",
	"all_souls",
	"christ_king"
};

time64_t Tridentine::date(int day, int month, int year) {
	::tmElements_t ts;						// for arduino
	ts.Second = 0;							/* seconds,  range 0 to 59          */
	ts.Minute = 0;							/* minutes, range 0 to 59           */
	ts.Hour = 0;							/* hours, range 0 to 23             */
	ts.Day = day;							/* day of the month, range 1 to 31  */
	ts.Month = month;						/* month, range 1 to 12             */
	ts.Year = year - BEGIN_EPOCH;			/* The number of years since 1970   */

	return ::makeTime(ts);
}

int Tridentine::date_difference(time64_t date1, time64_t date2) {
	return (int)(date2 - date1);
}

void Tridentine::print_date(time64_t datetime) {
	::tmElements_t ts;						// for arduino
	::breakTime(datetime, ts);

	int d = ts.Day;
	int m = ts.Month;
	int y = ts.Year + BEGIN_EPOCH;

	printf("[%2d/%2d/%4d]\t", d, m, y);
}

int Tridentine::year(time64_t date) {
//#ifndef __AVR__
//	struct tm* ts = gmtime(&date);
//	return ts->tm_year + BEGIN_EPOCH;
//#else
	return ::year(date); // for arduino
//#endif
}

int Tridentine::liturgical_year(time64_t datetime) {
	int _year = ::year(datetime);
	if (datetime >= first_advent_sunday(_year) && datetime < date(1, 1, ::year(first_advent_sunday(_year)) + 1)) {
		return _year + 1;
	}

	return _year;
}

bool Tridentine::isleap(int year) {
	return (((year) > 0) && !((year) % 4) && (((year) % 100) || !((year) % 400)));
}

bool Tridentine::issameday(time64_t date1, time64_t date2) {
	::tmElements_t ts;						// for arduino
	::breakTime(date1, ts);

	int d1 = ts.Day;
	int m1 = ts.Month;
	int y1 = ts.Year;

	::breakTime(date2, ts);
	if (ts.Day == d1 && ts.Month == m1 && ts.Year == y1) return true;

	return false;
}

time64_t Tridentine::weekday_after(int weekdayAfter, time64_t date) {
	if (weekdayAfter < 0 || weekdayAfter > 6) return (time64_t)-1;

	::tmElements_t ts;						// for arduino
	::breakTime(date, ts);
	int currentWeekday = ts.Wday - 1;

	int daysAfter = DAYS_PER_WEEK; // if the date is exactly one week later

	if (currentWeekday != weekdayAfter) { // otherwise (will be true in most cases)
		daysAfter = weekdayAfter - currentWeekday;
		if (daysAfter < 0) daysAfter += DAYS_PER_WEEK;
	}

	time64_t outputDate = date + (daysAfter * SECS_PER_DAY);  // add number of days (in seconds) from date
	return outputDate;
	// bug: when crossing dst, may be ahead or behind by one hour - will not affect actual date.
}

bool Tridentine::sunday(time64_t date) { 
	bool bResult = (weekday(date) == PY_SUN);
	return bResult;
}

time64_t Tridentine::sunday_after(time64_t date) { return weekday_after(0, date); }

int Tridentine::dayofmonth(time64_t date) {
	::tmElements_t ts;						// for arduino
	::breakTime(date, ts);
	return ts.Day;
}

bool Tridentine::firstday(uint8_t day, time64_t datetime) {
	// day is PY_MON .. PY_SUN. Returns true if day is the first one in the month

	if ((weekday(datetime) == day) && (dayofmonth(datetime) <= 7)) {
		return true;
	}

	return false;
}

time64_t Tridentine::start_date(int year) {
	return first_advent_sunday(year);
}

time64_t Tridentine::end_date(int year) {
	return first_advent_sunday(year + 1) - SECS_PER_DAY;
}

time64_t Tridentine::first_advent_sunday(int year) {
	return sunday_before(nativity(year)) - (3 * DAYS_PER_WEEK * SECS_PER_DAY);
}

time64_t Tridentine::nativity(int year) {
	return date(25, 12, year);
}

time64_t Tridentine::weekday_before(int weekdayBefore, time64_t datetime) {
	if (weekdayBefore < 0 || weekdayBefore > 6) return (time64_t)-1;

	::tmElements_t ts;						
	::breakTime(datetime, ts);
	int currentWeekday = ts.Wday - 1;

	int daysBefore = DAYS_PER_WEEK; // if the date is exactly one week ago

	if (currentWeekday != weekdayBefore) { // otherwise (will be true in most cases)
		daysBefore = currentWeekday - weekdayBefore;
		if (daysBefore < 0) daysBefore += DAYS_PER_WEEK;
	}

	time64_t outputDate = datetime - (daysBefore * SECS_PER_DAY); // subtract number of days (in seconds) from date

												   /*
												   char inDateStr[100];
												   char outDateStr[100];
												   sprintf(inDateStr, "%s", ctime(&date));
												   sprintf(outDateStr,"%s", ctime(&outputDate));
												   printf("Output: the %s before %s is %s\n", DAYS_OF_WEEK[weekdayBefore], inDateStr, outDateStr);
												   */

	return outputDate;

	// bug: when crossing dst, may be ahead or behind by one hour - will not affect actual date.
}

time64_t Tridentine::sunday_before(time64_t date) { return weekday_before(0, date); }

int Tridentine::weekday(time64_t date, bool bUsePythonWeekdayFormat) {
	// Arduino time library ts.Wday 1=sun .. 7=sat
	// Python date library weekday 0=mon .. 6=sun
	// This function returns a python compatible number for weekday
	::tmElements_t ts;		
	::breakTime(date, ts);
	if (bUsePythonWeekdayFormat) {
		//int8_t Wday = (ts.Wday - 2) % 7;
		return (ts.Wday + 5) % 7;	// return python weekday
	}
	else {
		return ts.Wday - 1;
	}
}

//@functools.lru_cache()
//def computus(year):
time64_t Tridentine::computus(int year) {
	/*
    """Calculate the date of Easter.

    Args:
        year: Integer with the year.

    Returns:
        A `datetime.Date` object with the date of Easter.

    """
*/
/*
	int a = year % 19;
    int b = year; // 100
    int c = year % 100;
    int d = b; // 4
    int e = b % 4;
    int f = (b + 8); // 25
    int g = (b - f + 1); // 3
    int h = (19 * a + b - d - g + 15) % 30;
    int i = c; // 4
    int k = c % 4;
    int m = (32 + 2 * e + 2 * i - h - k) % 7;
    int n = (a + 11 * h + 22 * m); // 451
    int month = (h + m - 7 * n + 114); // 31
    int day = ((h + m - 7 * n + 114) % 31) + 1;
	return date(day, month, year);
*/
	int golden_number = (year % 19) + 1;
	int dominical_number = (year + (year / 4) - (year / 100) + (year / 400)) % 7;
	int solar_correction = (year - 1600) / 100 - (year - 1600) / 400;
	int lunar_correction = (((year - 1400) / 100) * 8) / 25;
	int paschal_full_moon = (3 - 11 * golden_number + solar_correction - lunar_correction) % 30;

	while (!(dominical_number > 0)) {
		dominical_number += 7;
	}

	while (!(paschal_full_moon > 0)) {
		paschal_full_moon += 30;
	}

	if ((paschal_full_moon == 29) || (paschal_full_moon == 28 && golden_number > 11)) {
		paschal_full_moon -= 1;
	}

	int difference = (4 - paschal_full_moon - dominical_number) % 7;
	if (difference < 0) difference += 7;

	int day_easter = paschal_full_moon + difference + 1;
	if (day_easter < 11) {
		//# Easter occurs in March.
		//printf("(Easter: %2d/%2d/%4d)\t", day_easter + 21, 3, year);
		return date(day_easter + 21, 3, year);
	}
	else {
		//# Easter occurs in April.
		//printf("(Easter: %2d/%2d/%4d)\t", day_easter - 10, 4, year);
		return date(day_easter - 10, 4, year);
	}




    //return dt.date(year, month, day)
}
/*
class MovableFeast(metaclass=ABCMeta):
    """An abstract class for a movable feast.

    A movable feast must have two attributes:

    1. A name.
    2. A date.

    The name must correspond to the feast data in `movable_feasts_ferias_et_al.json`.

    """

    @property
    @abstractmethod
    def name(self):
        """Return the name of the feast."""
        raise NotImplementedError('A movable feast must have a name.')

    @abstractmethod
    def date(year):
        """Compute the date of the movable feast given the year."""
        raise NotImplementedError('A movable feast must have a date.')

    def __repr__(self):
        """Print the name of the feast."""
        return self.name
*/

//class GaudeteSunday(MovableFeast):
time64_t Tridentine::GaudeteSunday(int year) {
    /*"""Represents Gaudete Sunday."""

    name = 'Gaudete Sunday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Gaudete Sunday.

        Gaudete Sunday is the third Sunday of Advent.

        """
        xmas = dt.date(year - 1, 12, 25)
        return xmas - dt.timedelta(xmas.weekday() + 8)
        */
	time64_t xmas = nativity(year);
	return xmas - ((weekday(xmas) + 8) * SECS_PER_DAY);
}


//class AdventEmbertide(MovableFeast):
time64_t Tridentine::AdventEmbertide(int year, int day) {    
	/*"""Represents Advent Embertide."""

    name = 'Advent Embertide'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Advent Embertide.

        Advent Embertide is the Wednesday, Friday, and Saturday after Gaudete Sunday.

        """
        return sorted([GaudeteSunday.date(year) + dt.timedelta(i) for i in [3, 5, 6]])
		*/
	
	// day is 1..3, function will return -1 as time64_t value otherwise
	switch (day){
	case 1:
		return GaudeteSunday(year) + 3 * SECS_PER_DAY;
		break;
	case 2:
		return GaudeteSunday(year) + 5 * SECS_PER_DAY;
		break;
	case 3:
		return GaudeteSunday(year) + 6 * SECS_PER_DAY;
		break;

	default:
		return -1;
	}
}


//class SundayWithinTheOctaveOfXmas(MovableFeast):
time64_t Tridentine::SundayWithinTheOctaveOfXmas(int year) {
    /*"""Represents Sunday within the Octave of Christmas."""

    name = 'Sunday within the Octave of Christmas'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Sunday within the Octave of Easter."""
        xmas = dt.date(year - 1, 12, 25)
        sunday = xmas + dt.timedelta(6 - xmas.weekday())
        if sunday == xmas:
            sunday += dt.timedelta(7)
        return sunday*/

	time64_t xmas = nativity(year - 1);
	time64_t sunday = xmas + ((6 - weekday(xmas)) * SECS_PER_DAY);
	if (sunday == xmas) {
		//sunday += 7 * SECS_PER_DAY; // this would be handled by the Octave Day of Christmas
		return 0;
	}
	return sunday;
}


//class HolyName(MovableFeast):
time64_t Tridentine::HolyName(int year) {
	/*"""Represents the Feast of the Holy Name."""

    name = 'The Holy Name'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of the Holy Name.

        The Feast of the Holy Name is generally the first Sunday of the year, unless the
        first Sunday falls on January 1, January 6, or January 7, in which case the
        Feast of the Holy Name is moved to January 2.

        """
        new_years_day = dt.date(year, 1, 1)
        holy_name = new_years_day + dt.timedelta(6 - new_years_day.weekday())
        if holy_name in [new_years_day, dt.date(year, 1, 6), dt.date(year, 1, 7)]:
            return dt.date(year, 1, 2)
        return holy_name*/
	time64_t new_years_day = date(1, 1, year);
	time64_t holy_name = new_years_day + ((6 - weekday(new_years_day)) * SECS_PER_DAY);
	if (holy_name == new_years_day || holy_name == date(6, 1, year) || holy_name == date(7, 1, year)) {
		return date(2, 1, year);
	}
	return holy_name;
}


//class HolyFamily(MovableFeast):
time64_t Tridentine::HolyFamily(int year) {
    /*"""Represents the Feast of the Holy Family."""

    name = 'The Holy Family'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of the Holy Family.

        The Feast of the Holy Family is the first Sunday after Three Kings Day.

        """
        epiphany = dt.date(year, 1, 6)
        delta = dt.timedelta(6 - epiphany.weekday())
        if delta == dt.timedelta(0):
            delta = dt.timedelta(7)
        return epiphany + delta*/
	time64_t epiphany = date(6, 1, year);
	time64_t delta = (6 - weekday(epiphany)) * SECS_PER_DAY;
	if (delta == 0) {
		delta = 7 * SECS_PER_DAY;
	}
	return epiphany + delta;
}

//class PloughMonday(MovableFeast):
time64_t Tridentine::PloughMonday(int year) {
    /*"""Represents Plough Monday."""

    name = 'Plough Monday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Plough Monday.

        Plough Monday is the first Monday after Three Kings Day.

        """
        epiphany = dt.date(year, 1, 6)
        if epiphany.weekday() == 6:
            return epiphany + dt.timedelta(1)
        return HolyFamily.date(year) + dt.timedelta(1)*/
	time64_t epiphany = date(6, 1, year);
	if (weekday(epiphany) == 6) {
		return epiphany + 1 * SECS_PER_DAY;
	}
	return HolyFamily(year) + 1 * SECS_PER_DAY;
}

//class AshWednesday(MovableFeast):
time64_t Tridentine::AshWednesday(int year) {
    /*"""Represents Ash Wednesday."""

    name = 'Ash Wednesday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Ash Wednesday.

        Ash Wednesday is forty days prior to Easter, excluding Sundays.

        """
        return Easter.date(year) - dt.timedelta(46)*/
	return Easter(year) - 46 * SECS_PER_DAY;
}

//class LentenEmbertide(MovableFeast):
time64_t Tridentine::LentenEmbertide(int year, int day) {
	/*"""Represents Lenten Embertide."""

    name = 'Lenten Embertide'

    @functools.lru_cache()
    def date(year):
        """Calculate the dates of Lenten Embertide.

        Lenten Embertide is the Wednesday, Friday, and Saturday after the first Sunday
        of Lent.

        """
        return [AshWednesday.date(year) + dt.timedelta(i) for i in [7, 9, 10]]*/

	// day is 1..3, function will return -1 as time64_t value otherwise
	switch (day) {
	case 1:
		return AshWednesday(year) + 7 * SECS_PER_DAY;
		break;
	case 2:
		return AshWednesday(year) + 9 * SECS_PER_DAY;
		break;
	case 3:
		return AshWednesday(year) + 10 * SECS_PER_DAY;
		break;

	default:
		return -1;
	}
}

//class Quinquagesima(MovableFeast):
time64_t Tridentine::Quinquagesima(int year) {
    /*"""Represents Quinquagesima."""

    name = 'Quinquagesima'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Quinquagesima.

        Quinquagesima is the Sunday before Ash Wednesday.

        """
        return AshWednesday.date(year) - dt.timedelta(3)*/
	return AshWednesday(year) - 3 * SECS_PER_DAY;
}

//class FatThursday(MovableFeast):
time64_t Tridentine::FatThursday(int year) {
	/*"""Represents Fat Thursday."""

		name = 'Fat Thursday'

		@functools.lru_cache()
		def date(year) :
		"""Calculate the date of Fat Thursday.

		Fat Thursday is the Thursday before Ash Wednesday.

		"""
		return AshWednesday.date(year) - dt.timedelta(6)*/
	return AshWednesday(year) - 6 * SECS_PER_DAY;
}

//class ShroveMonday(MovableFeast):
time64_t Tridentine::ShroveMonday(int year) {
	/*"""Represents Shrove Monday."""

		name = 'Shrove Monday'

		@functools.lru_cache()
		def date(year) :
		"""Calculate the date of Shrove Monday.

		Shrove Monday is the Monday before Ash Wednesday.

		"""
		return AshWednesday.date(year) - dt.timedelta(2)*/
	return AshWednesday(year) - 2 * SECS_PER_DAY;

}

//class MardiGras(MovableFeast):
time64_t Tridentine::MardiGras(int year) {
	/*"""Represents Mardi Gras."""

		name = 'Mardi Gras'

		@functools.lru_cache()
		def date(year) :
		"""Calculate the date of Mardi Gras.

		Mardi Gras is the Tuesday before Ash Wednesday.

		"""
		return AshWednesday.date(year) - dt.timedelta(1)*/
	return AshWednesday(year) - 1 * SECS_PER_DAY;

}

//class Sexagesima(MovableFeast):
time64_t Tridentine::Sexagesima(int year) {
    /*"""Represents Sexagesima."""

    name = 'Sexagesima'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Sexagesima.

        Sexagesima is the Sunday before Quinquagesima.

        """
        return Quinquagesima.date(year) - dt.timedelta(7)*/
	return Quinquagesima(year) - 7 * SECS_PER_DAY;
}


//class Septuagesima(MovableFeast):
time64_t Tridentine::Septuagesima(int year) {
    /*"""Represents Septuagesima."""

    name = 'Septuagesima'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Septuagesima.

        Septuagesima is the Sunday before Sexagesima.

        """
        return Sexagesima.date(year) - dt.timedelta(7)*/
	return Sexagesima(year) - 7 * SECS_PER_DAY;
}


//class StMatthias(MovableFeast):
time64_t Tridentine::StMatthias(int year) {
    /*"""Represents the Feast of St. Matthias."""

    name = 'St. Matthias'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of St. Matthias.

        The Feast of St. Matthias is generally February 24, but is moved to February 25
        on leap years.

        """
        if calendar.isleap(year):
            return dt.date(year, 2, 25)
        return dt.date(year, 2, 24)*/
	if (isleap(year)) {
		return date(25, 2, year);
	}
	return date(24, 2, year);
}

//class StGabrielOfOurLadyOfSorrows(MovableFeast):
time64_t Tridentine::StGabrielOfOurLadyOfSorrows(int year) {
	/*"""Represents the Feast of St. Gabriel of Our Lady of Sorrows."""

		name = 'St. Gabriel of Our Lady of Sorrows'

		@functools.lru_cache()
		def date(year) :
		"""Calculate the date of the Feast of St. Gabriel of Our Lady of Sorrows.

		The Feast of St.Gabriel of Our Lady of Sorrows is generally February 27, but is
		moved to February 28 on leap years.

		"""
		if calendar.isleap(year) :
			return dt.date(year, 2, 28)
			return dt.date(year, 2, 27)*/
	if (isleap(year)) {
		return date(28, 2, year);
	}
	return date(27, 2, year);
}

//class LaetareSunday(MovableFeast):
time64_t Tridentine::LaetareSunday(int year) {
    /*"""Represents Laetare Sunday."""

    name = 'Laetare Sunday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Laetare Sunday.

        Lateare Sunday is the fourth Sunday of Lent.

        """
        return Easter.date(year) - dt.timedelta(21)*/
	return Easter(year) - 21 * SECS_PER_DAY;
}

//class PassionSunday(MovableFeast):
time64_t Tridentine::PassionSunday(int year) {
	/*"""Represents Passion Sunday."""

		name = 'Passion Sunday'

		@functools.lru_cache()
		def date(year) :
		"""Calculate the date of Passion Sunday.

		Passion Sunday is the second Sunday before Easter.

		"""
		return Easter.date(year) - dt.timedelta(14)*/
	return Easter(year) - 14 * SECS_PER_DAY;
}

//class SevenSorrows(MovableFeast):
time64_t Tridentine::SevenSorrows(int year) {
    /*"""Represents the Feast of the Seven Sorrows."""

    name = 'The Seven Sorrows'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of the Seven Sorrows.

        The Feast of the Seven Sorrows of Mary is the Friday of Passion Week.

        """
        return PalmSunday.date(year) - dt.timedelta(2)*/
	return PalmSunday(year) - 2 * SECS_PER_DAY;
}

//class LadyDay(MovableFeast):
time64_t Tridentine::LadyDay(int year) {
    /*"""Represents Lady Day."""

    name = 'Lady Day'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Lady Day.

        Lady Day is generally March 25, except when March 25 falls in Holy Week or the
        first week of Eastertide, in which case it is transfered to the Monday after
        Quasimodo Sunday, or if it falls on another Sunday, in which case it is
        transferred to the following Monday.

        """
        lady_day = dt.date(year, 3, 25)
        if PalmSunday.date(year) <= lady_day <= QuasimodoSunday.date(year):
            return QuasimodoSunday.date(year) + dt.timedelta(1)
        elif lady_day.weekday() == 6:
            return lady_day + dt.timedelta(1)
        else:
            return lady_day*/
	time64_t lady_day = date(25, 3, year);
	if ((PalmSunday(year) <= lady_day) && (lady_day <= QuasimodoSunday(year))) {
		return QuasimodoSunday(year) + 1 * SECS_PER_DAY;
	}
	else if (weekday(lady_day) == 6) {
		return lady_day + 1 * SECS_PER_DAY;
	}
	else {
		return lady_day;
	}
}

time64_t Tridentine::StJoseph(int year) {
	time64_t st_joseph = date(19, 3, year);
	if (st_joseph >= PalmSunday(year) && st_joseph < Easter(year)) {
		// if it falls in holy week, the feast of St Joseph is transferred to the Tuesday after Low/Quasimodo Sunday
		return QuasimodoSunday(year) + (2 * SECS_PER_DAY);
	}
	else if (sunday(st_joseph)) {
		return st_joseph + SECS_PER_DAY; // transfer to monday 20th
	}

	return st_joseph;
}

//class PalmSunday(MovableFeast):
time64_t Tridentine::PalmSunday(int year) {
	/*"""Represents Palm Sunday."""

	name = 'Palm Sunday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Palm Sunday.

		Palm Sunday is the Sunday before Easter.

		"""
		return Easter.date(year) - dt.timedelta(7)*/
	return Easter(year) - 7 * SECS_PER_DAY;
}

//class MondayOfHolyWeek(MovableFeast):
time64_t Tridentine::MondayOfHolyWeek(int year) {
    /*"""Represents the Monday of Holy Week."""

    name = 'Monday of Holy Week'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Monday in Holy Week."""
        return PalmSunday.date(year) + dt.timedelta(1)*/
	return PalmSunday(year) + 1 * SECS_PER_DAY;
}

//class TuesdayOfHolyWeek(MovableFeast):
time64_t Tridentine::TuesdayOfHolyWeek(int year) {
	/*"""Represents the Tuesday of Holy Week."""

	name = 'Tuesday of Holy Week'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Tuesday in Holy Week."""
		return PalmSunday.date(year) + dt.timedelta(2)*/
	return PalmSunday(year) + 2 * SECS_PER_DAY;
}

//class SpyWednesday(MovableFeast):
time64_t Tridentine::SpyWednesday(int year) {
	/*"""Represents Spy Wednesday."""

	name = 'Spy Wednesday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Spy Wednesday.

		Spy Wednesday is the Wednesday before Easter.

		"""
		return Easter.date(year) - dt.timedelta(4)*/
	return Easter(year) - 4 * SECS_PER_DAY;
}

//class MaundyThursday(MovableFeast):
time64_t Tridentine::MaundyThursday(int year) {
    /*"""Represents Maundy Thursday."""

    name = 'Maundy Thursday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Maundy Thursday.

        Maundy Thursday is the Thursday before Easter.

        """
        return Easter.date(year) - dt.timedelta(3)*/
	return Easter(year) - 3 * SECS_PER_DAY;
}

//class GoodFriday(MovableFeast):
time64_t Tridentine::GoodFriday(int year) {
	/*"""Represents Good Friday."""

	name = 'Good Friday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Good Friday.

		Good Friday is the Friday before Easter.

		"""
		return Easter.date(year) - dt.timedelta(2)*/
	return Easter(year) - 2 * SECS_PER_DAY;
}

//class HolySaturday(MovableFeast):
time64_t Tridentine::HolySaturday(int year) {
	/*"""Represents Holy Saturday."""

	name = 'Holy Saturday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Holy Saturday.

		Holy Saturday is the Saturday before Easter.

		"""
		return Easter.date(year) - dt.timedelta(1)*/
	return Easter(year) - 1 * SECS_PER_DAY;
}

//class Easter(MovableFeast):
time64_t Tridentine::Easter(int year) {
	/*"""Represents Easter."""

	name = 'Easter'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter.

		This is an alias for `computus`.

		"""
		return computus(year)*/
	return computus(year);
}

//class EasterMonday(MovableFeast):
time64_t Tridentine::EasterMonday(int year) {
	/*"""Represents Easter Monday."""

	name = 'Easter Monday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter Monday."""
		return Easter.date(year) + dt.timedelta(1)*/
	return Easter(year) + 1 * SECS_PER_DAY;
}

//class EasterTuesday(MovableFeast):
time64_t Tridentine::EasterTuesday(int year) {
	/*"""Represents Easter Tuesday."""

	name = 'Easter Tuesday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter Tuesday."""
		return Easter.date(year) + dt.timedelta(2)*/
	return Easter(year) + 2 * SECS_PER_DAY;
}

//class EasterWednesday(MovableFeast):
time64_t Tridentine::EasterWednesday(int year) {
	/*"""Represents Easter Wednesday."""

	name = 'Easter Wednesday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter Wednesday."""
		return Easter.date(year) + dt.timedelta(3)*/
	return Easter(year) + 3 * SECS_PER_DAY;
}

//class EasterThursday(MovableFeast):
time64_t Tridentine::EasterThursday(int year) {
	/*"""Represents Easter Thursday."""

	name = 'Easter Thursday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter Thursday."""
		return Easter.date(year) + dt.timedelta(4)*/
	return Easter(year) + 4 * SECS_PER_DAY;
}

//class EasterFriday(MovableFeast):
time64_t Tridentine::EasterFriday(int year) {
	/*"""Represents Easter Friday."""

	name = 'Easter Friday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter Friday."""
		return Easter.date(year) + dt.timedelta(5)*/
	return Easter(year) + 5 * SECS_PER_DAY;
}

//class EasterSaturday(MovableFeast):
time64_t Tridentine::EasterSaturday(int year) {
	/*"""Represents Easter Saturday."""

	name = 'Easter Saturday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Easter Saturday."""
		return Easter.date(year) + dt.timedelta(6)*/
	return Easter(year) + 6 * SECS_PER_DAY;
}

//class QuasimodoSunday(MovableFeast):
time64_t Tridentine::QuasimodoSunday(int year) {
	/*"""Represents Quasimodo Sunday."""

	name = 'Quasimodo Sunday'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of Quasimodo Sunday.

		Quasimodo Sunday is the first Sunday after Easter.

		"""
		return Easter.date(year) + dt.timedelta(7)*/
	return Easter(year) + 7 * SECS_PER_DAY;
}

//class MisericordiaSunday(MovableFeast):
time64_t Tridentine::MisericordiaSunday(int year) {
    /*"""Represents Misericordia Sunday."""

    name = 'Misericordia Sunday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Misericordia Sunday.

        Misericordia Sunday is the second Sunday after Easter.

        """
        return Easter.date(year) + dt.timedelta(14)*/
	return Easter(year) + 14 * SECS_PER_DAY;
}


//class JubilateSunday(MovableFeast):
time64_t Tridentine::JubilateSunday(int year) {
    /*"""Represents Jubilate Sunday."""

    name = 'Jubilate Sunday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Jubilate Sunday.

        Jubilate Sunday is the third Sunday after Easter.

        """
        return Easter.date(year) + dt.timedelta(21)*/
	return Easter(year) + 21 * SECS_PER_DAY;
}


//class CantateSunday(MovableFeast):
time64_t Tridentine::CantateSunday(int year) {
    /*"""Represents Cantate Sunday."""

    name = 'Cantate Sunday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Cantate Sunday.

        Cantate Sunday is the fourth Sunday after Easter.

        """
        return Easter.date(year) + dt.timedelta(28)*/
	return Easter(year) + 28 * SECS_PER_DAY;
}


//class MajorRogation(MovableFeast):
time64_t Tridentine::MajorRogation(int year) {
    /*"""Represents the Major Rogation."""

    name = 'Major Rogation'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Major Rogation.

        The Major Rogation is generally April 25, unless it falls on Easter, in which
        case it is transferred to the following Tuesday.

        """
        major_rogation = dt.date(year, 4, 25)
        if major_rogation != Easter.date(year):
            return major_rogation
        else:
            return major_rogation + dt.timedelta(2)*/
	time64_t major_rogation = date(25, 4, year);
	if (major_rogation != Easter(year)) {
		return major_rogation;
	}
	else {
		return major_rogation + 2 * SECS_PER_DAY; // no need to calculate easter twice - if in here, major rogation == easter sunday
	}
}

time64_t Tridentine::AscensionVigil(int year) {
	/*
	Vigil of the Ascension

	Occurs one day before Ascension Thursday
	*/

	return Ascension(year) - SECS_PER_DAY;
}

//class Ascension(MovableFeast):
time64_t Tridentine::Ascension(int year) {
    /*"""Represents Ascension Thursday."""

    name = 'Ascension'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Ascension Thursday.

        Ascension Thursday is the fourtieth day of Eastertide.

        """
        return Easter.date(year) + dt.timedelta(39)*/
	return Easter(year) + 39 * SECS_PER_DAY;
}

time64_t Tridentine::SundayAfterAscension(int year) {
	/*
		Sunday after the Ascension
	*/
	return Ascension(year) + 3 * SECS_PER_DAY;
}

//class MinorRogation(MovableFeast):
time64_t Tridentine::MinorRogation(int year, int day) {
    /*"""Represents the Minor Rogation."""

    name = 'Minor Rogation'

    @functools.lru_cache()
    def date(year):
        """Calculate the dates of the Minor Rogation.

        The Minor Rogation is the Monday, Tuesday, and Wednesday before Ascension
        Thursday.

        """
        return [Ascension.date(year) - dt.timedelta(i) for i in range(3, 0, -1)]*/

	// 3, 0 -1? should be 1 2 3 ?
	switch (day) {
	case 1:
		return Ascension(year) - 3 * SECS_PER_DAY;
		break;
	case 2:
		return Ascension(year) - 2 * SECS_PER_DAY;
		break;
	case 3:
		return Ascension(year) - 1 * SECS_PER_DAY;
		break;

	default:
		return -1;
	}
}


//class Pentecost(MovableFeast):
time64_t Tridentine::PentecostVigil(int year) {
	/*"""Represents Pentecost Vigil."""

	name = 'Vigil Mass of Pentecost'

	@functools.lru_cache()
	def date(year):
		"""Calculate the date of The Vigil of Pentecost.

		The Vigil of Pentecost is the day before Pentecost.
		49 days after Easter

		"""
		return Easter.date(year) + dt.timedelta(49)*/
	return Easter(year) + 48 * SECS_PER_DAY;
}

//class Pentecost(MovableFeast):
time64_t Tridentine::Pentecost(int year) {
    /*"""Represents Pentecost."""

    name = 'Pentecost'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Pentecost.

        Pentecost is the fiftieth and final day of Eastertide.

        """
        return Easter.date(year) + dt.timedelta(49)*/
	return Easter(year) + 49 * SECS_PER_DAY;
}


//class PentecostMonday(MovableFeast):
time64_t Tridentine::PentecostMonday(int year) {
    /*"""Represents Pentecost Monday."""

    name = 'Pentecost Monday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Pentecost Monday."""
        return Pentecost.date(year) + dt.timedelta(1)*/
	return Pentecost(year) + 1 * SECS_PER_DAY;
}


//class PentecostTuesday(MovableFeast):
time64_t Tridentine::PentecostTuesday(int year) {
    /*"""Represents Pentecost Tuesday."""

    name = 'Pentecost Tuesday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Pentecost Tuesday."""
        return Pentecost.date(year) + dt.timedelta(2)*/
	return Pentecost(year) + 2 * SECS_PER_DAY;
}


//class WhitEmbertide(MovableFeast):
time64_t Tridentine::WhitEmbertide(int year, int day) {
    /*"""Represents Whit Embertide."""

    name = 'Whit Embertide'

    @functools.lru_cache()
    def date(year):
        """Calculate the dates of Whit Embertide.

        Whit Embertide is the Wednesday, Friday, and Saturday after Pentecost.

        """
        return sorted([Pentecost.date(year) + dt.timedelta(i) for i in [3, 5, 6]])*/
	switch (day) {
	case 1:
		return Pentecost(year) + 3 * SECS_PER_DAY;
		break;
	case 2:
		return Pentecost(year) + 5 * SECS_PER_DAY;
		break;
	case 3:
		return Pentecost(year) + 6 * SECS_PER_DAY;
		break;

	default:
		return -1;
	}
}


//class ThursdayInPentecostWeek(MovableFeast):
time64_t Tridentine::ThursdayInPentecostWeek(int year) {
    /*"""Represents Thursday in Pentecost Week."""

    name = 'Thursday in Pentecost Week'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Thursday in Pentecost Week."""
        return Pentecost.date(year) + dt.timedelta(4)*/
	return Pentecost(year) + 4 * SECS_PER_DAY;
}


//class TrinitySunday(MovableFeast):
time64_t Tridentine::TrinitySunday(int year) {
    /*"""Represents Trinity Sunday."""

    name = 'Trinity Sunday'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Trinity Sunday.

        Trinity Sunday is the Sunday after Pentecost.

        """
        return Pentecost.date(year) + dt.timedelta(7)*/
	return Pentecost(year) + 7 * SECS_PER_DAY;
}


//class CorpusChristi(MovableFeast):
time64_t Tridentine::CorpusChristi(int year) {
    /*"""Represents the Feast of Corpus Christi."""

    name = 'Corpus Christi'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of Corpus Christi.

        The Feast of Corpus Christi is the Thursday after Trinity Sunday.

        """
        return TrinitySunday.date(year) + dt.timedelta(4)*/
	return TrinitySunday(year) + 4 * SECS_PER_DAY;
}


//class SacredHeart(MovableFeast):
time64_t Tridentine::SacredHeart(int year) {
    /*"""Represents the Feast of the Sacred Heart."""

    name = 'The Sacred Heart'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of the Sacred Heart.

        The Feast of the Sacred Heart is the Friday in the week after the Feast of
        Corpus Christi.

        """
        return CorpusChristi.date(year) + dt.timedelta(8)*/
	return CorpusChristi(year) + 8 * SECS_PER_DAY;
}


//class PetersPence(MovableFeast):
time64_t Tridentine::PetersPence(int year) {
    /*"""Represents Peter's Pence."""

    name = 'Peter\'s Pence'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of Peter's Pence.

        Peter's Pence is the Sunday nearest to the Feast of SS. Peter & Paul.

        """
        ss_peter_paul = dt.date(year, 6, 29)
        return ss_peter_paul + dt.timedelta(((2 - ss_peter_paul.weekday()) % 7) - 3)*/
	time64_t ss_peter_paul = date(29, 6, year);
	return ss_peter_paul + ((((2 - weekday(ss_peter_paul)) % 7) - 3) * SECS_PER_DAY);
}


//class MichaelmasEmbertide(MovableFeast):
time64_t Tridentine::MichaelmasEmbertide(int year, int day) {
    /*"""Represents Michaelmas Embertide."""

    name = 'Michaelmas Embertide'

    @functools.lru_cache()
    def date(year):
        """Calculate the dates of Michaelmas Embertide.

        Michaelmas Embertide is the Wednesday, Friday, and Saturday after the third
        Sunday of September.

        """
        first_sunday_in_september = (
            dt.date(year, 9, 1) + dt.timedelta(6 - dt.date(year, 9, 1).weekday())
        )
        third_sunday_in_september = first_sunday_in_september + dt.timedelta(14)
        return [third_sunday_in_september + dt.timedelta(i) for i in [3, 5, 6]]*/
	time64_t first_sunday_in_september = date(1, 9, year) + ((6 - weekday(date(1, 9, year))) * SECS_PER_DAY);
	time64_t third_sunday_in_september = first_sunday_in_september + 14 * SECS_PER_DAY;

	switch (day) {
	case 1:
		return third_sunday_in_september + 3 * SECS_PER_DAY;
		break;
	case 2:
		return third_sunday_in_september + 5 * SECS_PER_DAY;
		break;
	case 3:
		return third_sunday_in_september + 6 * SECS_PER_DAY;
		break;

	default:
		return -1;
	}
}

time64_t Tridentine::AllSouls(int year) {
	/*
	Calculate the date of All Souls day

	All Souls day is 2nd November, unless it falls on a Sunday,
	in which case it is transferred to Monday 3rd
	*/

	time64_t all_souls = date(2, 11, year);
	if (weekday(all_souls) == 6) {
		all_souls += 1 * SECS_PER_DAY;
	}
	return all_souls;
}

//class ChristTheKing(MovableFeast):
time64_t Tridentine::ChristTheKing(int year) {
    /*"""Represents the Feast of Christ the King."""

    name = 'Christ the King'

    @functools.lru_cache()
    def date(year):
        """Calculate the date of the Feast of Christ the King.

        The Feast of Christ the King is the last Sunday of October.

        """
        halloween = dt.date(year, 10, 31)
        return halloween - dt.timedelta((halloween.weekday() + 1) % 7)*/
	time64_t halloween = date(31, 10, year);
	return halloween - (((weekday(halloween) + 1) % 7) * SECS_PER_DAY);
}

uint8_t Tridentine::Season(time64_t datetime) {
	int year = ::year(datetime);
	time64_t nativity = date(25, 12, year);
	
	// Advent (Violet)
	if (datetime >= first_advent_sunday(year) && datetime < nativity) {
		return SEASON_ADVENT;
	}

	// Christmas (White)
	time64_t epiphany = date(6, 1, year);
	if (!(datetime < nativity && datetime > epiphany)) {		
		return SEASON_CHRISTMAS;
	}

	if (datetime >= epiphany && datetime < Septuagesima(year)) {
		return SEASON_EPIPHANY;
	}

	// Septuagesima - Ash Wednesday
	// Violet vestments worn only on Sundays, not weekdays before Lent begins
	// See https://catholicherald.co.uk/commentandblogs/2018/01/28/what-is-septuagesima/
	if (datetime >= Septuagesima(year) && datetime < AshWednesday(year)) {
		return SEASON_SEPTUAGESIMA;
	}

	// Lent (Violet)
	if (datetime >= AshWednesday(year) && datetime < Easter(year)) {
		return SEASON_LENT;
	}

	// Easter (White)
	if (datetime >= Easter(year) && datetime < Pentecost(year)) {
		return SEASON_EASTER;
	}

	// Octave of Pentecost (Red)
	if (datetime >= Pentecost(year) && datetime < TrinitySunday(year)) { // Octave of Pentecost
		return SEASON_PENTECOST;
	}

	// from the first week after Pentecost up to the beginning of Advent in the next Liturgical year
	if ((datetime >= TrinitySunday(year)) && datetime < first_advent_sunday(year)) {
		return SEASON_AFTER_PENTECOST;
	}
}

time64_t Tridentine::Season_beginning(uint8_t season, time64_t datetime) {
	int year = ::year(datetime);

	if (season == SEASON_ADVENT) return first_advent_sunday(year);
	if (season == SEASON_CHRISTMAS) {
		if (year == liturgical_year(datetime)) { // is between January and first Advent Sunday
			return nativity(year - 1); // so Christmas was Dec 25th last year
		}
		else {
			return nativity(year); // otherwise after first Advent Sunday and before New Year, so Christmas is this year
		}
	}
	if (season == SEASON_EPIPHANY) return date(6, 1, year);
	if (season == SEASON_SEPTUAGESIMA) return Septuagesima(year);
	if (season == SEASON_LENT) return AshWednesday(year);
	if (season == SEASON_EASTER) return Easter(year);
	if (season == SEASON_PENTECOST) return Pentecost(year);
	if (season == SEASON_AFTER_PENTECOST) return TrinitySunday(year);

	printf("Season_beginning(): season unset");
	return datetime;
}


uint8_t Tridentine::Season_Week(time64_t datetime, uint8_t season) {
	time64_t week1_beginning = Season_beginning(season, datetime);
	
	int year = ::year(datetime);
	uint8_t week = 0;

	if (!sunday(week1_beginning)) { 
		// Lent begins on Ash Wednesday. 
		// Epiphany is on the 6th Jan, which can be a day other than Sunday
		// For advent, first sunday is in week one, not second sunday
		week1_beginning = sunday_after(week1_beginning);
		week += 1; // will be the first Sunday after
	}

	if (week1_beginning <= datetime) {
		week += (date_difference(week1_beginning, datetime) / (SECS_PER_DAY * DAYS_PER_WEEK));
	}

	if (season == SEASON_AFTER_PENTECOST || season == SEASON_ADVENT) {
		week += 1; // After Pentecost season starts with first sunday after Pentecost (Trinity Sunday), so Pentecost itself is one more week earlier
	}			   // The first Sunday in Advent is numbered 1, not 0

	return week;
}

void Tridentine::ColourAndClass(time64_t datetime, uint8_t& col, uint8_t& cls) {
	ColourAndClass(datetime, true, col, cls);
}

void Tridentine::ColourAndClass(time64_t datetime, bool doRogations, uint8_t& col, uint8_t& cls) {
	col = TR_LIT_COLOUR_GREEN;
	cls = 4;
	uint8_t season = Season(datetime);
	int year = ::year(datetime);

	// handle single days
	if (issameday(datetime, GaudeteSunday(year))) {
		col = TR_LIT_COLOUR_ROSE;
		cls = 1;
		return;
	}

	if (issameday(datetime, HolyFamily(year))) {
		col = TR_LIT_COLOUR_WHITE;
		cls = 2;
		return;
	}

	if (issameday(datetime, StGabrielOfOurLadyOfSorrows(year))) {
		col = TR_LIT_COLOUR_WHITE;
		cls = 3;
		return;
	}

	if (issameday(datetime, LadyDay(year))) {
		col = TR_LIT_COLOUR_WHITE;
		cls = 1;
		return;
	}

	if (issameday(datetime, StJoseph(year))) {
		col = TR_LIT_COLOUR_WHITE;
		cls = 1;
		return;
	}

	if (issameday(datetime, LaetareSunday(year))) {
		col = TR_LIT_COLOUR_ROSE;
		cls = 1;
		return;
	}

	if (issameday(datetime, GoodFriday(year))) {
		cls = 1;
		col = TR_LIT_COLOUR_BLACK;
		return;
	}

	if (issameday(datetime, Sexagesima(year)) || issameday(datetime, StMatthias(year))) {
		if (issameday(StMatthias(year), Sexagesima(year))) {
			cls = 2;	// feast of St Matthias is not celebrated if it falls on same day as Sexagesima 
			col = TR_LIT_COLOUR_VIOLET;
			return;
		}
		else {
			cls = 2;
			col = TR_LIT_COLOUR_RED;
			return;
		}
	}

	if (doRogations) {
		if (issameday(datetime, MinorRogation(year, 1)) ||
			issameday(datetime, MinorRogation(year, 2)) ||
			issameday(datetime, MinorRogation(year, 3))) {
			cls = 2;
			col = TR_LIT_COLOUR_VIOLET;
			return;
		}
	}

	// both Sundays and weekdays in the Octave of Pentecost use Red colours
	if (season == SEASON_PENTECOST || issameday(datetime, PentecostVigil(year))) { // Octave of Pentecost
		col = TR_LIT_COLOUR_RED;
		cls = 1;
		return;
	}

	if (season == SEASON_EPIPHANY && Season_Week(datetime, season) < 2) {
		col = TR_LIT_COLOUR_WHITE; // white continues to be worn up until the first Sunday after Epiphany
		return;
	}

	if (issameday(datetime, TrinitySunday(year))) {
		col = TR_LIT_COLOUR_WHITE;
		cls = 1;
		return;
	}

	if (issameday(datetime, AllSouls(year))) {
		col = TR_LIT_COLOUR_BLACK;
		cls = 1;
		return;
	}

	if (sunday(datetime)) { // is a Sunday
		cls = 2;
		switch (season) {
		case SEASON_ADVENT:
			col = TR_LIT_COLOUR_VIOLET;
			cls = 1;

			if (datetime == GaudeteSunday(year)) {
				col = TR_LIT_COLOUR_ROSE;
			}
			break;

		case SEASON_CHRISTMAS:
			col = TR_LIT_COLOUR_WHITE;
			// Sundays in Christmas cls = 2
			break;

		case SEASON_SEPTUAGESIMA:
			col = TR_LIT_COLOUR_VIOLET; // nb. Violet only worn on Sundays in this pre-lent period
			// Sundays in this period are cls 2
			break;

		case SEASON_LENT:
			cls = 1;
			col = TR_LIT_COLOUR_VIOLET;

			if (datetime == LaetareSunday(year)) {
				col = TR_LIT_COLOUR_ROSE;
			}
			break;

		case SEASON_EASTER:
			col = TR_LIT_COLOUR_WHITE;
			if (issameday(datetime, Easter(year) || issameday(datetime, QuasimodoSunday(year)))) {
				cls = 1; // Easter Sunday and Low Sunday are both Class 1
			}
			break;

		default:
			col = TR_LIT_COLOUR_GREEN;
			break;
		}
		return;
	}
	else {	// is a weekday (Feria default class = 4)
		switch (season) {
		case SEASON_ADVENT:
			col = TR_LIT_COLOUR_VIOLET;
			cls = 3; // Feria of Advent
			if (datetime >= GaudeteSunday(year)) {
				cls = 2; // Greater Feria of Advent
			}

			// ember days of advent are also Violet
			break;

		case SEASON_CHRISTMAS:
			col = TR_LIT_COLOUR_WHITE;
			if (year < liturgical_year(datetime)) {	// if in Christmas season and liturgical year is
				cls = 2; // In Christmas Octave		// one more than current year, then still before Octave Day of Christmas - after which, Feria are class 4
			}
			break;

		case SEASON_SEPTUAGESIMA:
			col = TR_LIT_COLOUR_GREEN; // nb. Violet only worn on Sundays in this pre-lent period
			break;

		case SEASON_LENT:
			cls = 3;
			col = TR_LIT_COLOUR_VIOLET;

			if (datetime >= PalmSunday(year) && datetime < GoodFriday(year)) { // Holy Week
				cls = 1;
			}

			// ember days of lent are also Violet
			break;

		case SEASON_EASTER:
			col = TR_LIT_COLOUR_WHITE;
			if (datetime >= Easter(year) && datetime < QuasimodoSunday(year)) {
				cls = 1; // Weekdays of Easter week are class 1, class 4 after that
			}
			break;

		case SEASON_PENTECOST:
			col = TR_LIT_COLOUR_GREEN;
			
			if (IsEmberDay(datetime)) {
				col = TR_LIT_COLOUR_RED; // embertide in Pentecost
			}
			break;

		default:
			col = TR_LIT_COLOUR_GREEN;

			if (IsEmberDay(datetime)) {
				col = TR_LIT_COLOUR_VIOLET; // must be Michaelmas embertide
			}
			break;
		}
		return;
	}
}

bool Tridentine::IsEmberDay(time64_t datetime) {
	int year = ::year(datetime);
	uint8_t season = Season(datetime);
	
	bool bIsEmbertide = false;

	for (uint8_t i = 1; i <= 3; i++) {
		switch (season) {
		case SEASON_ADVENT:
			bIsEmbertide = (issameday(datetime, AdventEmbertide(year, i)));
			break;

		case SEASON_LENT:
			bIsEmbertide = (issameday(datetime, LentenEmbertide(year, i)));
			break;

		case SEASON_PENTECOST:
			bIsEmbertide = (issameday(datetime, WhitEmbertide(year, i)));
			break;

		default: // Michaelmas Embertide
			bIsEmbertide = (issameday(datetime, MichaelmasEmbertide(year, i)));
			break;
		}
		if (bIsEmbertide) break;
	}

	return bIsEmbertide;
}

void Tridentine::GetDay(time64_t datetime, String& Mass) {
	bool bSunday = sunday(datetime);
	int year = ::year(datetime);

	Mass = "";

	uint8_t season = Season(datetime);
	uint8_t season_week = Season_Week(datetime, season);
	uint8_t octave_daynumber = 0;

	String yml_season = "";
	String yml_path = "";
	String yml_subpath = "";

	if (bSunday) {
		yml_path = "sunday";
	}
	else {
		yml_path = "ferial";
	}

	bool bNoOutput = false; // if nothing is to be returned, eg. on sundays which will always be feast days, no point in searching for a yml key as it will be overridden by the feast (saves power)

	switch (season) {
	case SEASON_ADVENT:
		yml_season = "advent.";
		if (IsEmberDay(datetime)) {
			yml_path = "ember_day";
		}
		else if (datetime >= GaudeteSunday(year) && !bSunday) {
			yml_path = "greater_ferial";
		}
		break;

	case SEASON_CHRISTMAS:
		yml_season = "christmas.";
		if (datetime > nativity(year) && datetime < date(1, 1, year + 1)) {
			// is in Nativity Octave
			yml_subpath = "nativity_octave.";
			if (!bSunday) {
				octave_daynumber = ((datetime - nativity(year)) / SECS_PER_DAY) + 1;
			}
		}
		break;

	case SEASON_EPIPHANY:
		yml_season = "epiphany.";
		break;

	case SEASON_SEPTUAGESIMA:
		yml_season = "septuagesima.";
		if (bSunday) {
			bNoOutput = true;
		}
		break;

	case SEASON_LENT:
		yml_season = "lent.";
		if (datetime >= (AshWednesday(year) + SECS_PER_DAY) && datetime < sunday_after(AshWednesday(year))) {
			// After Ashes
			if (!bSunday) {
				yml_subpath = "after_ashes.";
			}
			else {
				bNoOutput = true;
			}
		}

		if (datetime >= PassionSunday(year) && datetime < PalmSunday(year)) {
			// In Passion Week
			if (!bSunday) {
				yml_subpath = "passion_week.";
			}
			else {
				bNoOutput = true;
			}
		}

		if (datetime >= PalmSunday(year) && datetime < Easter(year)) {
			// In Holy Week
			if (!bSunday) {
				if (weekday(datetime) == PY_THU) {
					// Maundy Thursday
					bNoOutput = true; // Will be taken care of as a moveable feast
				}
				else {
					yml_subpath = "holy_week.";
				}
			}
			else {
				bNoOutput = true;
			}
		}

		if (!bSunday && IsEmberDay(datetime)) {
			yml_path = "ember_day";
		}
		break;

	case SEASON_EASTER:
		yml_season = "easter.";
		if (datetime > Easter(year) && datetime < QuasimodoSunday(year)) {
			// is in Easter Octave
			if (!bSunday) {
				yml_subpath = "octave.";
			}
			else {
				bNoOutput = true;
			}
		}
		break;

	case SEASON_PENTECOST:
		yml_season = "pentecost.";
		
		if (!bSunday) {
			if (IsEmberDay(datetime)) {
				yml_path = "ember_day";
			}
		}
		else {
			bNoOutput = true;
		}
		break;

	case SEASON_AFTER_PENTECOST:
		// from the first week after Pentecost up to the beginning of Advent in the next Liturgical year
		yml_season = "after_pentecost.";

		if (bSunday) {
			uint8_t after_pentecost_numweeks = Season_Week(first_advent_sunday(year) - SECS_PER_WEEK, season);

			if (issameday(sunday_after(datetime), first_advent_sunday(year))) {
				yml_season += "last.";
			}
			else {
				if (season_week > 23) {
					yml_season = "epiphany.resumed.";
					season_week = season_week + 7 - after_pentecost_numweeks;
				}
			}
		}
		break;

	default:
		bNoOutput = true;
	}

	if (!bNoOutput) {
		Yml i18n;
		Ordinalizer ordinalizer;

		yml_path = "tridentine.season." + yml_season + yml_subpath + yml_path;
		Mass = i18n.get(yml_path);

		uint8_t wday = weekday(datetime, false); // get weekday 0=sun 6=sat
		uint8_t m = ::month(datetime);

		String Weekday = i18n.get("weekday." + String(wday));
		String Month = i18n.get("month." + String(m));

		Mass.replace("%{weekday}", Weekday);
		Mass.replace("%{week}", ordinalizer.ordinalize(season_week));

		if (octave_daynumber > 0) {
			Mass.replace("%{day}", ordinalizer.ordinalize(octave_daynumber));
		}
	}
}

void Tridentine::GetMassAndCommFromTrFixedFeast(Tr_Fixed_Feast& trff, String& Mass, String& Commemoration, uint8_t season, uint8_t day_class) {
	if (trff.bMassIsCommemoration || (season == SEASON_LENT && day_class <= trff.Class)) { // in lent, feasts become commemorations
		// both strings in trff are for commemorations, so concatenate them
		Commemoration = trff.Mass;
		if (trff.bHasCommemoration) {
			Commemoration = Commemoration + ", " + trff.Commemoration;
		}
	}
	else {
		if (trff.bHasCommemoration) { // one Commemoration (if present)
			Commemoration = trff.Commemoration;
		}
		Mass = trff.Mass; // one Mass
	}
}

void Tridentine::HandleVotiveMasses(time64_t datetime, uint8_t& cls, uint8_t& col, String& Mass, String& Commemoration) {
	bool is_votive = false;
	HandleVotiveMasses(datetime, is_votive, cls, col, Mass, Commemoration);
}

void Tridentine::HandleVotiveMasses(time64_t datetime, bool& is_votive, uint8_t& cls, uint8_t& col, String& Mass, String& Commemoration) {
	/*
		Votive Masses

		ChristEternalPriest				celebrated on first Thursday or Saturday of month, 3rd Class
		SacredHeartOfJesus				celebrated on first Friday of month, 3rd Class
		ImmaculateHeartOfMary			celebrated on first Saturday of month, 3rd Class
		SaturdayOfOurLady				celebrated on all Saturdays which are 4th Class Feria
		MassForTheDeadInAllSoulsWeek	celebrated on any 3rd or 4th Class day between Nov 3rd to Nov 8th
		RorateCoeli						celebrate at the earliest opportunity after the configured day in Advent
	*/

	if (cls < 3) return;

	is_votive = true;

	bool bFirstThursday = firstday(PY_THU, datetime);
	bool bFirstFriday = firstday(PY_FRI, datetime);
	bool bFirstSaturday = firstday(PY_SAT, datetime);

	Yml i18n;
	String conf;
	String yml_path = "tridentine.";
	String conf_path = "config.celebrate_";
	String mass_path = "votive.";

	if (bFirstThursday || bFirstSaturday) {
		String var = "christ_priest";
		conf = i18n.get(yml_path + conf_path + var);
		if ((bFirstThursday && (conf == "4" || conf == "thursday")) || (bFirstSaturday && (conf == "6" || conf == "saturday"))) {
			if (cls == 3) Commemoration = Mass; // if it is of the same class, make the currently Mass into a Commemoration
			Mass = i18n.get(yml_path + mass_path + var);
			cls = 3;
			col = TR_LIT_COLOUR_WHITE;
			return;
			// if Immaculate Heart of Mary is celebrated on the first Saturday and Christ Priest is also selects 
			// Saturday, Christ Priest will have priority, as this code is structured
		}
	}

	if (bFirstFriday) {
		String var = "sacred_heart";
		conf = i18n.get(yml_path + conf_path + var);
		if (conf == "true" || conf == "1") {
			if (cls == 3) Commemoration = Mass; // if it is of the same class, make the currently Mass into a Commemoration
			Mass = i18n.get(yml_path + mass_path + var);
			cls = 3;
			col = TR_LIT_COLOUR_WHITE;
			return;
		}
	}

	if (bFirstSaturday) {
		String var = "immaculate_heart";
		conf = i18n.get(yml_path + conf_path + var);
		bool bIsImmaculateHeart = (conf == "true" || conf == "1");
		
		if (!bIsImmaculateHeart) {
			var += "_in_eastertide";
			conf = i18n.get(yml_path + conf_path + var);

			if (conf == "true" || conf == "1") {
				time64_t first_saturday_of_month_afterLowSunday = QuasimodoSunday(year(datetime)) + 6 * SECS_PER_DAY;
				while (dayofmonth(first_saturday_of_month_afterLowSunday) > 7) {
					first_saturday_of_month_afterLowSunday += SECS_PER_WEEK;
				}
				if (issameday(datetime, first_saturday_of_month_afterLowSunday)) {
					bIsImmaculateHeart = true;
				}
			}
		}
		if (bIsImmaculateHeart) {
			if (cls == 3) Commemoration = Mass; // if it is of the same class, make the currently Mass into a Commemoration
			Mass = i18n.get(yml_path + mass_path + var);
			cls = 3;
			col = TR_LIT_COLOUR_WHITE;
			return;
		}
	}

	if (weekday(datetime) == PY_SAT && cls == 4) {
		String var = "sat_of_our_lady";
		conf = i18n.get(yml_path + conf_path + var);
		if (conf == "true" || conf == "1") {
			Mass = i18n.get(yml_path + mass_path + var);
			cls = 4;
			col = TR_LIT_COLOUR_WHITE;
			return;
		}
	}

	uint8_t dayofmonth = ::day(datetime);
	// between Nov 3rd and Nov 8th on Class 3 or 4 days
	if (cls >= 3 && ::month(datetime) == 11 && dayofmonth >= 3 && dayofmonth <= 8) {
		String var = "mass_for_the_dead";
		conf = i18n.get(yml_path + conf_path + var);
		if (conf == "true" || conf == "1") {
			Commemoration = ""; // do not celebrate Commemoration if Mass for the Dead is being said
			Mass = i18n.get(yml_path + mass_path + var);
			cls = 3;
			col = TR_LIT_COLOUR_BLACK;
			return;
		}
	}

	// rorate_coeli_in_advent
	// This Votive Mass will be celebrated on the configured day of advent, if
	// that day is a Feria of class 3 or 4 (since the first day of Advent is a Sunday,
	// the day of the Rorate Coeli mass can be selected so that it is certain to occur
	int year = ::year(datetime);
	time64_t fa_sunday = first_advent_sunday(year);
	if (datetime > fa_sunday && datetime < nativity(year)) { // cls is already 3 or 4 if we got here (checked at top of function)
		String var = "rorate_coeli_in_advent";
		conf = i18n.get(yml_path + conf_path + var + "_on_day");
		if (conf != "" && conf != "false") {
			int numdays = conf.toInt();
			if (numdays >= 0 && numdays <= 24) {
				time64_t earliest_datetime = fa_sunday + (numdays * SECS_PER_DAY);
				if (issameday(datetime, earliest_datetime)) {
					//if (cls == 3) Commemoration = Mass; // if it is of the same class, make the currently Mass into a Commemoration (does this apply in Advent, when Ferias are either class 3 or 2?)
					Mass = i18n.get(yml_path + mass_path + var);
					cls = 3;
					col = TR_LIT_COLOUR_WHITE;
					return;
				}
			}
		}
	}

	is_votive = false;
}

void Tridentine::get(time64_t datetime, Tr_Calendar_Day& td, bool doRogations) {
	int year = ::year(datetime);
	uint8_t season = Season(datetime);

	uint8_t col = TR_LIT_COLOUR_UNSET;
	uint8_t cls = 4;

	bool hdo = sunday(datetime);
	bool bSunday = sunday(datetime);
	bool feast_lord = false;

	String Mass = "";
	String Commemoration = "";

	ColourAndClass(datetime, doRogations, col, cls);
	
	String Mass_day = "";
	GetDay(datetime, Mass_day);

	bool bIsSet = false;

	bool is_feast_mf = false;
	uint8_t cls_mf = cls;
	uint8_t col_mf = col;
	bool hdo_mf = hdo;
	bool feast_lord_mf = false;
	String Mass_mf = "";
	String Commemoration_mf = "";
	bool bCommemorationOnly_mf = false;
	
	GetMoveableFeast(datetime, doRogations, is_feast_mf, cls_mf, col_mf, hdo_mf, feast_lord_mf, bCommemorationOnly_mf, Mass_mf, Commemoration_mf);
	if (is_feast_mf) {			
		if (cls_mf <= cls) {
			if (bCommemorationOnly_mf) {
				Mass = Mass_day;
			}
			else {
				Mass = Mass_mf;
			}
			Commemoration = Commemoration_mf;
			hdo = hdo_mf;
			cls = cls_mf;
			col = col_mf;
			bIsSet = true;
		}
		else if (cls == 1 && cls_mf == 2) {
			Commemoration = Mass_mf;
		}

	}
	if (!feast_lord_mf) {
		bool is_feast_ff = false;
		uint8_t cls_ff = cls;
		uint8_t col_ff = col;
		bool hdo_ff = hdo;
		bool feast_lord_ff = false;
		bool immaculate_conception = false;
		String Mass_ff = "";
		String Commemoration_ff = "";
		bool bCommemorationOnly_ff = false;
		
		GetFixedFeast(datetime, is_feast_ff, cls_ff, col_ff, hdo_ff, feast_lord_ff, immaculate_conception, bCommemorationOnly_ff, Mass_ff, Commemoration_ff);
		if (is_feast_ff) {
			bool bAssign = false;

			if (bSunday) {
				if (feast_lord_ff || immaculate_conception || (cls_ff < cls && !is_feast_mf) || (season == SEASON_AFTER_PENTECOST && cls_ff == cls)) { // sunday which can be replaced by a feast of the lord
					bAssign = true;
				}
			}
			else { // feria/weekday
				if ((!bCommemorationOnly_ff && cls_ff <= cls) || bCommemorationOnly_ff) { // commemmorations of lower rank can be held on a higher ranked day, eg Ferias of Advent
					bAssign = true;
				}
			}

			if (bAssign) {
				if (season != SEASON_LENT || (season == SEASON_LENT && cls_ff < cls)) {
					if (is_feast_mf && !bCommemorationOnly_ff) {
						Commemoration = Mass;
					}
					else if (cls_ff <= cls + 1) {
						Commemoration = Commemoration_ff;
					}
					
					if ((bSunday && cls_ff < cls && !feast_lord_ff) || (bSunday && immaculate_conception)) {
						Commemoration = Mass_day;
					}

					if (bSunday && cls_ff == cls && !feast_lord_ff && !immaculate_conception) {
						Commemoration = Mass_ff;
						Mass = Mass_day;
					}
					else if (!bCommemorationOnly_ff) {
						Mass = Mass_ff;
						hdo = hdo_ff;
						cls = cls_ff < cls ? cls_ff : cls;
					}
					else if (!is_feast_mf) {
						Mass = Mass_day;
					}
					col = col_ff == TR_LIT_COLOUR_UNSET ? col : col_ff; // the colour is the colour of the day if so
				}
				else {
					Mass = Mass_day;
					Commemoration = Mass_ff;
				}
				bIsSet = true;
			}
		}

		bool is_votive = false;
		uint8_t cls_vm = cls;
		uint8_t col_vm = col;
		String Mass_vm = Mass;
		String Commemoration_vm = Commemoration;
		GetVotiveMass(datetime, is_votive, cls_vm, col_vm, Mass_vm, Commemoration_vm);
		if (is_votive) {
			Mass = Mass_vm;
			Commemoration = Commemoration_vm;
			cls = cls_vm;
			col = col_vm;
			bIsSet = true;
		}

		if (!bIsSet) {
			Mass = Mass_day;
		}
	}
	// here, either the fixed feast will have set the class and colour, or the moveable feast - 
	// whichever has the lower class number (higher rank) will prevail. If neither prevail, then
	// the default colour and class for the Sunday (2) or Feria (4) will prevail.
	Yml i18n;
	String Class = i18n.get("class." + String(cls));
	String Colour = i18n.get("colour." + String(col));
	String DayofWeek = i18n.get("weekday." + String(weekday(datetime, false)));

	td.datetime = datetime;
	td.Class = Class;
	td.Colour = Colour;
	td.DayofWeek = DayofWeek;
	td.Mass = Mass;
	td.Commemoration = Commemoration;
	td.HolyDayOfObligation = hdo;

#if(false)
	#ifndef __AVR__
	String yearanddate = String(year) + "," + String(::day(datetime)) + "-" + String(::month(datetime)) + "-" + String(::year(datetime));
	String liturgicalday = yearanddate + ",\"" + DayofWeek + "\",\"" + Class + "\",\"" + Colour + "\",\"" + Mass + "\",\"" + Commemoration + "\"\n";

	//printf("%4d,%02d-%02d-%4d,\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"\n", year, ::day(datetime), ::month(datetime), ::year(datetime), DayofWeek.c_str(), Class.c_str(), Colour.c_str(), Mass.c_str(), Commemoration.c_str());

	FILE* fp;
	fp = fopen("output.csv", "ab");
	//fprintf(fp, "%4d,%02d-%02d-%4d,\"%s\",\"%s\",\"%s\",\"%s\"\n", year, ::day(datetime), ::month(datetime), ::year(datetime), Class.c_str(), Colour.c_str(), Mass.c_str(), Commemoration.c_str());
	//fputs(liturgicalday.c_str(), fp);
	fwrite(liturgicalday.c_str(), 1, liturgicalday.length(), fp);
	fclose(fp);
	#endif
#endif
}

void Tridentine::GetMoveableFeast(time64_t datetime, bool doRogations, bool& is_feast, uint8_t& cls, uint8_t& col, bool& hdo, bool& feast_lord, bool& bCommemorationOnly, String& Mass, String& Commemoration) {
	int year = ::year(datetime);
	uint8_t season = Season(datetime);

	int feast = 0;
	int feast2 = 0; // The third minor rogation day falls on the same day as the Vigil of Ascension Thurday. It is the only time this happens. Displaying the Rogation Day in the Commemoration area on the screen will ensure both Masses are included
	bool comm = false;
	bool comm2 = false; // Ascension vigil/third rogation day clash resolution

	cls = 0; // holds the class for each feast
	hdo = sunday(datetime); // All Sundays are Holy Days of Obligation, plus certain weekday solemnities

	Commemoration = "";
	Mass = "";

	feast_lord = false;

	if (issameday(datetime, GaudeteSunday(year))) { feast = 1; cls = 1; }
	if (issameday(datetime, AdventEmbertide(year, 1))) { feast = 2; cls = 2; }
	if (issameday(datetime, AdventEmbertide(year, 2))) { feast = 3; cls = 2; }
	if (issameday(datetime, AdventEmbertide(year, 3))) { feast = 4; cls = 2; }
	if (issameday(datetime, SundayWithinTheOctaveOfXmas(year))) { feast = 5; cls = 2;  hdo = true; }
	if (issameday(datetime, HolyName(year))) { feast = 6; cls = 2; feast_lord = true; }
	if (issameday(datetime, HolyFamily(year))) { feast = 7; cls = 2; feast_lord = true; }
	if (issameday(datetime, PloughMonday(year))) { feast = 8; cls = 4; }
	if (issameday(datetime, AshWednesday(year))) { feast = 9; cls = 1;  hdo = true; }
	if (issameday(datetime, LentenEmbertide(year, 1))) { feast = 10; cls = 2; }
	if (issameday(datetime, LentenEmbertide(year, 2))) { feast = 11; cls = 2; }
	if (issameday(datetime, LentenEmbertide(year, 3))) { feast = 12; cls = 2; }
	if (issameday(datetime, Quinquagesima(year))) { feast = 13; cls = 2; }
	if (issameday(datetime, FatThursday(year))) { feast = 14; cls = 4; }
	if (issameday(datetime, ShroveMonday(year))) { feast = 15; cls = 3; }
	if (issameday(datetime, MardiGras(year))) { feast = 16; cls = 4; }
	if (issameday(datetime, StMatthias(year))) { feast = 19; cls = 2; } // moved up before Sexagesima and Septuagesima so that these take precedence, should one of them fall on the same day as St Matthias (they are Sundays)
	if (issameday(datetime, Sexagesima(year))) { feast = 17; cls = 2; }
	if (issameday(datetime, Septuagesima(year))) { feast = 18; cls = 2; }
	if (issameday(datetime, StGabrielOfOurLadyOfSorrows(year))) { feast = 20; cls = 3; }
	if (issameday(datetime, LaetareSunday(year))) { feast = 21; cls = 1; }
	if (issameday(datetime, PassionSunday(year))) { feast = 22; cls = 1; }
	if (issameday(datetime, SevenSorrows(year))) { feast = 23; cls = 3; comm = true; }
	if (issameday(datetime, LadyDay(year))) { feast = 24; cls = 1; }
	if (issameday(datetime, StJoseph(year))) { feast = 25; cls = 1; hdo = true; } // Class 1 feast of St Joseph is transferred to the following Monday if it falls on a Sunday, or Tuesday after Low Sunday if it falls in Holy Week
	if (issameday(datetime, PalmSunday(year))) { feast = 26; cls = 1; feast_lord = true; }
	if (issameday(datetime, MondayOfHolyWeek(year))) { feast = 27; cls = 1; }
	if (issameday(datetime, TuesdayOfHolyWeek(year))) { feast = 28; cls = 1; }
	if (issameday(datetime, SpyWednesday(year))) { feast = 29; cls = 1; }
	if (issameday(datetime, MaundyThursday(year))) { feast = 30; cls = 1; }
	if (issameday(datetime, GoodFriday(year))) { feast = 31; cls = 1; hdo = true; }
	if (issameday(datetime, HolySaturday(year))) { feast = 32; cls = 1; }
	if (issameday(datetime, Easter(year))) { feast = 33; cls = 1; feast_lord = true; }
	if (issameday(datetime, EasterMonday(year))) { feast = 34; cls = 1; }
	if (issameday(datetime, EasterTuesday(year))) { feast = 35; cls = 1; }
	if (issameday(datetime, EasterWednesday(year))) { feast = 36; cls = 1; }
	if (issameday(datetime, EasterThursday(year))) { feast = 37; cls = 1; }
	if (issameday(datetime, EasterFriday(year))) { feast = 38; cls = 1; }
	if (issameday(datetime, EasterSaturday(year))) { feast = 39; cls = 1; }
	if (issameday(datetime, QuasimodoSunday(year))) { feast = 40; cls = 1; }
	if (issameday(datetime, MisericordiaSunday(year))) { feast = 41; cls = 2; }
	if (issameday(datetime, JubilateSunday(year))) { feast = 42; cls = 2; }
	if (issameday(datetime, CantateSunday(year))) { feast = 43; cls = 2; }
	
	if (doRogations) {
		if (issameday(datetime, MajorRogation(year))) { feast = 44; cls = 2; } // not sure if class = 2? made same as minor rogations
		if (issameday(datetime, MinorRogation(year, 1))) { feast = 45; cls = 2; }
		if (issameday(datetime, MinorRogation(year, 2))) { feast = 46; cls = 2; }
		if (issameday(datetime, MinorRogation(year, 3))) { feast = 47; cls = 2; } // the third minor rogation day is the same day as the vigil of the Ascension (ie, one day before Ascension Thursday)
		if (issameday(datetime, AscensionVigil(year))) { feast2 = 48; cls = 2; comm2 = true; }
	}
	else {
		if (issameday(datetime, AscensionVigil(year))) { feast = 48; cls = 2; }
	}

	if (issameday(datetime, Ascension(year))) { feast = 49; cls = 1; hdo = true; feast_lord = true; }
	if (issameday(datetime, SundayAfterAscension(year))) { feast = 50; cls = 2; }
	if (issameday(datetime, PentecostVigil(year))) { feast = 51; cls = 1; }
	if (issameday(datetime, Pentecost(year))) { feast = 52; cls = 1; feast_lord = true; }
	if (issameday(datetime, PentecostMonday(year))) { feast = 53; cls = 1; }
	if (issameday(datetime, PentecostTuesday(year))) { feast = 54; cls = 1; }
	if (issameday(datetime, WhitEmbertide(year, 1))) { feast = 55; cls = 1; }
	if (issameday(datetime, WhitEmbertide(year, 2))) { feast = 56; cls = 1; }
	if (issameday(datetime, WhitEmbertide(year, 3))) { feast = 57; cls = 1; }
	if (issameday(datetime, ThursdayInPentecostWeek(year))) { feast = 58; cls = 1; }
	if (issameday(datetime, TrinitySunday(year))) { feast = 59; cls = 1; feast_lord = true; }
	if (issameday(datetime, CorpusChristi(year))) { feast = 60; cls = 1; hdo = true; feast_lord = true; }
	if (issameday(datetime, SacredHeart(year))) { feast = 61; cls = 1; hdo = true; feast_lord = true; }
	if (issameday(datetime, PetersPence(year))) { feast = 62; cls = 2; }
	if (issameday(datetime, MichaelmasEmbertide(year, 1))) { feast = 63; cls = 2; }
	if (issameday(datetime, MichaelmasEmbertide(year, 2))) { feast = 64; cls = 2; }
	if (issameday(datetime, MichaelmasEmbertide(year, 3))) { feast = 65; cls = 2; }
	if (issameday(datetime, AllSouls(year))) { feast = 66; cls = 1; }
	if (issameday(datetime, ChristTheKing(year))) { feast = 67; cls = 1; feast_lord = true; }

	Yml i18n;

	// Handle moveable feasts and default feria
	if (feast > 0) {
		is_feast = true;

		String yml_path = "tridentine.solemnity." + String(Feasts[feast]);
		if (!comm) {
			Mass = i18n.get(yml_path);
		}
		else {
			Commemoration = i18n.get(yml_path);
			bCommemorationOnly = true;
		}

		if (feast2 > 0) { // handle Ascension Vigil/Third minor rogation day clash by making the Vigil a commemoration
			if (comm2) {
				Commemoration = i18n.get("tridentine.solemnity." + String(Feasts[feast2]));
			}
		}
	}
}

void Tridentine::GetFixedFeast(time64_t datetime, bool& is_feast, uint8_t& cls, uint8_t& col, bool& hdo, bool& feast_lord, bool& immaculate_conception, bool& bCommemorationOnly, String& Mass, String& Commemoration) {
	Yml i18n;
	Tr_Fixed_Feast trff;

	i18n.get_fixed_feast(datetime, trff);

	is_feast = trff.IsFeast;

	if (trff.IsFeast) {
		cls = trff.Class;
		col = trff.Colour;
		bCommemorationOnly = trff.bMassIsCommemoration;
		if (trff.bHasCommemoration) {
			Commemoration = trff.Commemoration;
		}
		if (trff.bMassIsCommemoration) {
			Commemoration = trff.Mass;
		}
		else {
			Mass = trff.Mass;
		}
		
		feast_lord = trff.Feast_Of_The_Lord;
		immaculate_conception = trff.ImmaculateConception;
		hdo = trff.Holy_Day_Of_Obligation || sunday(datetime);
	}
}

void Tridentine::GetVotiveMass(time64_t datetime, bool& is_votive, uint8_t& cls, uint8_t& col, String& Mass, String& Commemoration) {
	HandleVotiveMasses(datetime, is_votive, cls, col, Mass, Commemoration);
}

//void Tridentine::GetDay(time64_t datetime, String& Mass){
//
//}
